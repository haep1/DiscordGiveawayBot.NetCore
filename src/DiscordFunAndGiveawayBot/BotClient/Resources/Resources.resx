<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EnterMessageNow" xml:space="preserve">
    <value>No problem, enter the message now!</value>
  </data>
  <data name="GiveawayAnnounce" xml:space="preserve">
    <value>Dear friends, let's start a new giveaway!</value>
  </data>
  <data name="GiveawayAnnounceKeyword" xml:space="preserve">
    <value>Just write the codeword `{0}` to participate.</value>
  </data>
  <data name="GiveawayAnnounceNext" xml:space="preserve">
    <value>Let's start the next giveaway!</value>
  </data>
  <data name="GiveawayAnnounceWin" xml:space="preserve">
    <value>You can win: **{0}**</value>
  </data>
  <data name="GiveawayAwardCultures" xml:space="preserve">
    <value>In which languages do you wan't to announce the giveaway? Supported languages are: </value>
  </data>
  <data name="GiveawayCongrats" xml:space="preserve">
    <value>Congratulations!</value>
  </data>
  <data name="GiveawayEnterChannelTip" xml:space="preserve">
    <value>Enter: %initgiveaway #[channel]</value>
  </data>
  <data name="GiveawayEnterStart" xml:space="preserve">
    <value>To start now please enter the command: `%start`</value>
  </data>
  <data name="GiveawayEnterTime" xml:space="preserve">
    <value>Please tell me first when the giveaway should end.</value>
  </data>
  <data name="GiveawayErrorRepeat" xml:space="preserve">
    <value>Error in repeat announcement: </value>
  </data>
  <data name="GiveawayErrorTimer" xml:space="preserve">
    <value>Error creating the timer. Giveaway failed to initialize.</value>
  </data>
  <data name="GiveawayExamplePrize" xml:space="preserve">
    <value>`An awesome key code`</value>
  </data>
  <data name="GiveawayHowOften" xml:space="preserve">
    <value>How often should the giveaway take place?</value>
  </data>
  <data name="GiveawayInitialized" xml:space="preserve">
    <value>Great, you finished initializing the giveaway!</value>
  </data>
  <data name="GiveawayKeyword" xml:space="preserve">
    <value>Very well, what's the key word users must reply, to participate in the raffle?</value>
  </data>
  <data name="GiveawayKeywordExample" xml:space="preserve">
    <value>Now enter the keyword, e.g. `giveaway!`</value>
  </data>
  <data name="GiveawayMissingChannel" xml:space="preserve">
    <value>You missed to add the channel!</value>
  </data>
  <data name="GiveawayNotInitialized" xml:space="preserve">
    <value>Cannot start the giveaway before it is initialized.</value>
  </data>
  <data name="GiveawayOftenExample" xml:space="preserve">
    <value>Enter e.g. `2` to repeate the event twice</value>
  </data>
  <data name="GiveawayParticipEndDate" xml:space="preserve">
    <value>The participation ends at {0}.</value>
  </data>
  <data name="GiveawayParticipEndTime" xml:space="preserve">
    <value>The participation ends at {0}.</value>
  </data>
  <data name="GiveawayPrize" xml:space="preserve">
    <value>OK, which prize should be raffled?</value>
  </data>
  <data name="GiveawayPrizeExample" xml:space="preserve">
    <value>Enter prize in language: {0} - e.g. {1}</value>
  </data>
  <data name="GiveawayStarted" xml:space="preserve">
    <value>Giveaway was started!</value>
  </data>
  <data name="GiveawayStartNew" xml:space="preserve">
    <value>Alright, let's start a new giveaway!</value>
  </data>
  <data name="GiveawayStopped" xml:space="preserve">
    <value>Giveaway was canceled!</value>
  </data>
  <data name="GiveawayTimeExample" xml:space="preserve">
    <value>Give either a time, e.g. `20:00` (for today at 20:00 o'clock), or date + time like e.g. `04/22/2019 20:00`</value>
  </data>
  <data name="GiveawayTimeResponse" xml:space="preserve">
    <value>Of course, the next raffle will take place at the following time: {0}</value>
  </data>
  <data name="GiveawayTryAgain" xml:space="preserve">
    <value>Please try again or enter `%cancel` to cancel the giveaway.</value>
  </data>
  <data name="GiveawayTypeCancel" xml:space="preserve">
    <value>You can enter `%cancel` at any moment, if you want to cancel the giveaway initiation!</value>
  </data>
  <data name="GiveawayWinner" xml:space="preserve">
    <value>Dear friends, we got a winner:</value>
  </data>
  <data name="GiveawayWinnerAnnounced" xml:space="preserve">
    <value>Winner was announced!</value>
  </data>
  <data name="GiveawayWinnerPrize" xml:space="preserve">
    <value>, you won this prize:</value>
  </data>
  <data name="GiveawayWrongCulture" xml:space="preserve">
    <value>You did not enter a list of cultures, e.g. `en` or `en, de`</value>
  </data>
  <data name="GiveawayWrongKeyword" xml:space="preserve">
    <value>You did not enter a keyword, e.g. `giveaway!`</value>
  </data>
  <data name="GiveawayWrongOften" xml:space="preserve">
    <value>You did not enter a correct number, e.g. `2`</value>
  </data>
  <data name="GiveawayWrongPrize" xml:space="preserve">
    <value>You did not enter a correct string, e.g. {0}</value>
  </data>
  <data name="GiveawayWrongTime" xml:space="preserve">
    <value>You have not entered a correct time format, e.g. `20: 00`</value>
  </data>
  <data name="GiveawyAwardCulturesExample" xml:space="preserve">
    <value>Enter e.g. `en` for english or enter `en, de` for english and german</value>
  </data>
  <data name="GoodLuck" xml:space="preserve">
    <value>Good luck!</value>
  </data>
</root>