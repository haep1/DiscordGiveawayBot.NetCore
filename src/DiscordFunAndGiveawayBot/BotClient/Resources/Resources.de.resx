<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EnterMessageNow" xml:space="preserve">
    <value>Kein Problem, gib die Nachricht jetzt ein!</value>
  </data>
  <data name="GiveawayAnnounce" xml:space="preserve">
    <value>Liebe Freunde, lasst uns ein neues Giveaway starten!</value>
  </data>
  <data name="GiveawayAnnounceKeyword" xml:space="preserve">
    <value>Schreibt einfach `{0}` um teilzunehmen.</value>
  </data>
  <data name="GiveawayAnnounceNext" xml:space="preserve">
    <value>Auf geht's zum nächsten Giveaway!</value>
  </data>
  <data name="GiveawayAnnounceWin" xml:space="preserve">
    <value>Der Preis, den es zu gewinnen gibt, ist: **{0}**</value>
  </data>
  <data name="GiveawayAwardCultures" xml:space="preserve">
    <value>In welchen Sprachen sollen die Gewinner bekannt gegeben werden? Unterstützte Sprachen sind: </value>
  </data>
  <data name="GiveawayCongrats" xml:space="preserve">
    <value>Herzlichen Glückwunsch!</value>
  </data>
  <data name="GiveawayEnterStart" xml:space="preserve">
    <value>Um zu Starten gebe jetzt bitte den Befehl: `%start` ein!</value>
  </data>
  <data name="GiveawayEnterTime" xml:space="preserve">
    <value>Bitte sag mir als Erstes, wann die Ziehungen stattfinden sollen.</value>
  </data>
  <data name="GiveawayErrorRepeat" xml:space="preserve">
    <value>Fehler bei Wiederholungsankündigung: </value>
  </data>
  <data name="GiveawayErrorTimer" xml:space="preserve">
    <value>Fehler bei der Erstellung des Timers. Giveaway konnte nicht initialisiert werden.</value>
  </data>
  <data name="GiveawayExamplePrize" xml:space="preserve">
    <value>`Ein toller Key Code`</value>
  </data>
  <data name="GiveawayHowOften" xml:space="preserve">
    <value>Wie oft soll das Giveaway stattfinden?</value>
  </data>
  <data name="GiveawayInitialized" xml:space="preserve">
    <value>Super, der Giveaway wurde fertig initialisiert!</value>
  </data>
  <data name="GiveawayKeyword" xml:space="preserve">
    <value>Sehr gut, wie soll das Schlüsselwort lauten um an der Ziehung teilzunehmen?</value>
  </data>
  <data name="GiveawayKeywordExample" xml:space="preserve">
    <value>Gebe jetzt das Schlüsselwort ein, z.B. `giveaway!`</value>
  </data>
  <data name="GiveawayOftenExample" xml:space="preserve">
    <value>Gebe z.B. `2` ein um das Event zweimal zu wiederholen</value>
  </data>
  <data name="GiveawayParticipEndDate" xml:space="preserve">
    <value>Die Teilnahme endet am {0}.</value>
  </data>
  <data name="GiveawayParticipEndTime" xml:space="preserve">
    <value>Die Teilnahme endet um {0} Uhr.</value>
  </data>
  <data name="GiveawayPrize" xml:space="preserve">
    <value>OK, welcher Preis soll verlost werden?</value>
  </data>
  <data name="GiveawayPrizeExample" xml:space="preserve">
    <value>Gib den Preis in folgender Sprache ein: {0} - z.B. {1}</value>
  </data>
  <data name="GiveawayStarted" xml:space="preserve">
    <value>Giveaway wurde gestartet!</value>
  </data>
  <data name="GiveawayStartNew" xml:space="preserve">
    <value>Alles klar, lass uns einen neuen Giveaway starten!</value>
  </data>
  <data name="GiveawayStopped" xml:space="preserve">
    <value>Giveaway wurde abgebrochen!</value>
  </data>
  <data name="GiveawayTimeExample" xml:space="preserve">
    <value>Gib entweder eine Zeit z.B. `20:00` ein (für heute um 20:00 Uhr), oder Datum + Zeit wie z.B. `22.04.2019 20:00`</value>
  </data>
  <data name="GiveawayTimeResponse" xml:space="preserve">
    <value>Alles klar, die nächste Ziehung findet zu folgendem Zeitpunkt statt: {0}</value>
  </data>
  <data name="GiveawayTryAgain" xml:space="preserve">
    <value>Bitte probiere es erneut oder gebe `%cancel` ein um das Giveaway abzubrechen.</value>
  </data>
  <data name="GiveawayTypeCancel" xml:space="preserve">
    <value>Du kannst jederzeit `%cancel` eingeben um die Giveaway Einrichtung abzubrechen.</value>
  </data>
  <data name="GiveawayWinner" xml:space="preserve">
    <value>Liebe Freunde, wir haben einen Gewinner:</value>
  </data>
  <data name="GiveawayWinnerAnnounced" xml:space="preserve">
    <value>Der Gewinner wurde bekannt gegeben!</value>
  </data>
  <data name="GiveawayWinnerPrize" xml:space="preserve">
    <value>, du hast folgenden Preis gewonnen: </value>
  </data>
  <data name="GiveawayWrongCulture" xml:space="preserve">
    <value>Du hast keine Liste von Sprachen übergeben, z.B. `en` oder `en, de`</value>
  </data>
  <data name="GiveawayWrongKeyword" xml:space="preserve">
    <value>You did not enter a correct string, e.g. `giveaway!`</value>
  </data>
  <data name="GiveawayWrongOften" xml:space="preserve">
    <value>Du hast keine korrekte Zahl eingegeben, z.B. `2`</value>
  </data>
  <data name="GiveawayWrongPrize" xml:space="preserve">
    <value>Du hast keine korrekte Zeichenfolge eingegeben, z.B. {0}</value>
  </data>
  <data name="GiveawayWrongTime" xml:space="preserve">
    <value>Du hast kein korrektes Zeitformat eingegeben, z.B. `20:00`</value>
  </data>
  <data name="GoodLuck" xml:space="preserve">
    <value>Viel Erfolg!</value>
  </data>
</root>